# Cursor Rules for Mot du Jour

## Code Style & Quality
- Use TypeScript strict mode
- Prefer const over let, avoid var
- Use meaningful variable and function names
- Add JSDoc comments for complex functions
- Keep functions small and focused (max 50 lines)
- Use early returns to reduce nesting
- Prefer composition over inheritance

## React/Next.js Best Practices
- Use functional components with hooks
- Prefer server components when possible
- Use proper error boundaries
- Implement proper loading states
- Use SWR for data fetching
- Prefer server actions over API routes when possible
- Use proper TypeScript types for props and state

## File Organization
- Keep components in /components
- Keep utilities in /lib
- Keep API routes in /app/api
- Use descriptive file names
- Group related files in folders

## Security
- Never expose API keys or secrets
- Use environment variables for configuration
- Validate all user inputs
- Use proper authentication checks
- Sanitize data before database operations

## Performance
- Use React.memo for expensive components
- Implement proper loading states
- Optimize images and assets
- Use proper caching strategies
- Minimize bundle size

## Error Handling
- Always handle errors gracefully
- Provide meaningful error messages
- Log errors for debugging
- Use proper fallbacks for failed operations

## Database
- Use proper RLS policies
- Validate data before insertion
- Use transactions for related operations
- Handle database errors properly

## UI/UX
- Use consistent spacing and typography
- Implement proper loading states
- Provide clear feedback to users
- Use proper form validation
- Ensure accessibility compliance
