'use server';

import { z } from 'zod';
import { createClient } from '@/lib/supabase/server';
import {
  User,
  Team,
  TeamMember,
  ActivityLog,
  Invitation,
  UserInsert,
  TeamInsert,
  TeamMemberInsert,
  ActivityLogInsert,
  InvitationInsert
} from '@/lib/supabase/types';

// Activity types
type ActivityType = 
  | 'account.created'
  | 'account.updated'
  | 'account.deleted'
  | 'team.created'
  | 'team.updated'
  | 'team.deleted'
  | 'team.member.added'
  | 'team.member.removed'
  | 'team.member.role.updated'
  | 'invitation.sent'
  | 'invitation.accepted'
  | 'invitation.declined'
  | 'subscription.created'
  | 'subscription.updated'
  | 'subscription.cancelled';
import { comparePasswords, hashPassword, setSession } from '@/lib/auth/session';
import { redirect } from 'next/navigation';
import { cookies } from 'next/headers';
import { createCheckoutSession } from '@/lib/payments/stripe';
import { getCurrentUser, getUserWithTeam } from '@/lib/supabase/queries';
import {
  validatedAction,
  validatedActionWithUser
} from '@/lib/auth/middleware';

async function logActivity(
  teamId: string | null | undefined,
  userId: string,
  type: ActivityType,
  ipAddress?: string
) {
  if (teamId === null || teamId === undefined) {
    return;
  }
  
  const supabase = await createClient();
  
  const { error } = await supabase
    .from('activity_logs')
    .insert({
      team_id: teamId,
      user_id: userId,
      action: type,
      ip_address: ipAddress || null
    });
    
  if (error) {
    console.error('Error logging activity:', error);
  }
}

const signInSchema = z.object({
  email: z.string().min(3).max(255),
  password: z.string().min(8).max(100)
});

export const signIn = validatedAction(signInSchema, async (data, formData) => {
  const { email, password } = data;

  // Check if input is email or phone number
  const isPhoneNumber = /^\+?[1-9]\d{1,14}$/.test(email.replace(/\s/g, ''));
  
  const supabase = await createClient();
  
  const { data: user, error } = await supabase
    .from('users')
    .select('*')
    .eq(isPhoneNumber ? 'phone_number' : 'email', email)
    .single();

  if (error || !user) {
    return {
      error: 'Email ou mot de passe invalide. Veuillez réessayer.',
      email,
      password
    };
  }

  const isPasswordValid = await comparePasswords(
    password,
    user.password_hash
  );

  if (!isPasswordValid) {
    return {
      error: 'Email ou mot de passe invalide. Veuillez réessayer.',
      email,
      password
    };
  }

  // Get team info for the user
  const userWithTeam = await getUserWithTeam(user.id);
  
  await Promise.all([
    setSession(user),
    logActivity(userWithTeam?.team?.id, user.id, 'account.updated')
  ]);

  const redirectTo = formData.get('redirect') as string | null;
  if (redirectTo === 'checkout') {
    const priceId = formData.get('priceId') as string;
    return createCheckoutSession({ team: userWithTeam?.team as any, priceId });
  }

  redirect('/dashboard');
});

const signUpSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
  phoneNumber: z.string().optional(),
  phoneCountry: z.string().optional(),
  inviteId: z.string().optional()
});

export const signUp = validatedAction(signUpSchema, async (data, formData) => {
  const { email, password, phoneNumber, phoneCountry, inviteId } = data;

  const supabase = await createClient();
  
  const { data: existingUser, error } = await supabase
    .from('users')
    .select('id')
    .eq('email', email)
    .single();

  if (existingUser) {
    return {
      error: 'Échec de la création de l\'utilisateur. Veuillez réessayer.',
      email,
      password
    };
  }

  const passwordHash = await hashPassword(password);

  const { data: createdUser, error: insertError } = await supabase
    .from('users')
    .insert({
      email,
      password_hash: passwordHash,
      phone_number: phoneNumber || null,
      phone_country: phoneCountry || null,
      role: 'owner' // Default role, will be overridden if there's an invitation
    })
    .select()
    .single();

  if (insertError || !createdUser) {
    return {
      error: 'Échec de la création de l\'utilisateur. Veuillez réessayer.',
      email,
      password
    };
  }

  let teamId: string = '';
  let userRole: string = 'member';
  let createdTeam: Team | null = null;

  if (inviteId) {
    // Check if there's a valid invitation
    const { data: invitation, error: inviteError } = await supabase
      .from('invitations')
      .select('*')
      .eq('id', inviteId)
      .eq('email', email)
      .eq('status', 'pending')
      .single();

    if (invitation) {
      teamId = invitation.team_id;
      userRole = invitation.role;

      await supabase
        .from('invitations')
        .update({ status: 'accepted' })
        .eq('id', invitation.id);

      await logActivity(teamId, createdUser.id, 'invitation.accepted');

      const { data: team, error: teamError } = await supabase
        .from('teams')
        .select('*')
        .eq('id', teamId)
        .single();
      
      createdTeam = team;
    } else {
      return { error: 'Invitation invalide ou expirée.', email, password };
    }
  } else {
    // Create a new team if there's no invitation
    const { data: team, error: teamError } = await supabase
      .from('teams')
      .insert({
        name: `${email}'s Team`
      })
      .select()
      .single();

    if (teamError || !team) {
      return {
        error: 'Échec de la création de l\'équipe. Veuillez réessayer.',
        email,
        password
      };
    }

    createdTeam = team;

    if (createdTeam) {
      teamId = createdTeam.id;
      userRole = 'owner';

      await logActivity(teamId, createdUser.id, 'team.created');
    }
  }

  const newTeamMember: TeamMemberInsert = {
    user_id: createdUser.id,
    team_id: teamId,
    role: userRole
  };

  // Insert team member
  const { error: memberError } = await supabase
    .from('team_members')
    .insert(newTeamMember);

  if (memberError) {
    console.error('Error adding team member:', memberError);
  }

  await Promise.all([
    logActivity(teamId, createdUser.id, 'account.created'),
    setSession(createdUser)
  ]);

  const redirectTo = formData.get('redirect') as string | null;
  if (redirectTo === 'checkout') {
    const priceId = formData.get('priceId') as string;
    return createCheckoutSession({ team: createdTeam as any, priceId });
  }

  redirect('/dashboard');
});

export async function signOut() {
  const user = await getCurrentUser();
  if (!user) return;
  
  const userWithTeam = await getUserWithTeam(user.id);
  await logActivity(userWithTeam?.team?.id, user.id, 'account.updated');
  (await cookies()).delete('session');
}

const updatePasswordSchema = z.object({
  currentPassword: z.string().min(8).max(100),
  newPassword: z.string().min(8).max(100),
  confirmPassword: z.string().min(8).max(100)
});

export const updatePassword = validatedActionWithUser(
  updatePasswordSchema,
  async (data, _, user) => {
    const { currentPassword, newPassword, confirmPassword } = data;

    const isPasswordValid = await comparePasswords(
      currentPassword,
      user.password_hash
    );

    if (!isPasswordValid) {
      return {
        currentPassword,
        newPassword,
        confirmPassword,
        error: 'Le mot de passe actuel est incorrect.'
      };
    }

    if (currentPassword === newPassword) {
      return {
        currentPassword,
        newPassword,
        confirmPassword,
        error: 'Le nouveau mot de passe doit être différent du mot de passe actuel.'
      };
    }

    if (confirmPassword !== newPassword) {
      return {
        currentPassword,
        newPassword,
        confirmPassword,
        error: 'Le nouveau mot de passe et la confirmation ne correspondent pas.'
      };
    }

    const newPasswordHash = await hashPassword(newPassword);
    const userWithTeam = await getUserWithTeam(user.id);

    await Promise.all([
      db
        .update(users)
        .set({ passwordHash: newPasswordHash })
        .where(eq(users.id, user.id)),
      logActivity(userWithTeam?.teamId, user.id, ActivityType.UPDATE_PASSWORD)
    ]);

    return {
      success: 'Mot de passe mis à jour avec succès.'
    };
  }
);

const deleteAccountSchema = z.object({
  password: z.string().min(8).max(100)
});

export const deleteAccount = validatedActionWithUser(
  deleteAccountSchema,
  async (data, _, user) => {
    const { password } = data;

    const isPasswordValid = await comparePasswords(password, user.passwordHash);
    if (!isPasswordValid) {
      return {
        password,
        error: 'Mot de passe incorrect. Suppression du compte échouée.'
      };
    }

    const userWithTeam = await getUserWithTeam(user.id);

    await logActivity(
      userWithTeam?.teamId,
      user.id,
      ActivityType.DELETE_ACCOUNT
    );

    // Soft delete
    await db
      .update(users)
      .set({
        deletedAt: sql`CURRENT_TIMESTAMP`,
        email: sql`CONCAT(email, '-', id, '-deleted')` // Ensure email uniqueness
      })
      .where(eq(users.id, user.id));

    if (userWithTeam?.teamId) {
      await db
        .delete(teamMembers)
        .where(
          and(
            eq(teamMembers.userId, user.id),
            eq(teamMembers.teamId, userWithTeam.teamId)
          )
        );
    }

    (await cookies()).delete('session');
    redirect('/connection');
  }
);

const updateAccountSchema = z.object({
  name: z.string().min(1, 'Name is required').max(100),
  email: z.string().email('Invalid email address')
});

export const updateAccount = validatedActionWithUser(
  updateAccountSchema,
  async (data, _, user) => {
    const { name, email } = data;
    const userWithTeam = await getUserWithTeam(user.id);

    await Promise.all([
      db.update(users).set({ name, email }).where(eq(users.id, user.id)),
      logActivity(userWithTeam?.teamId, user.id, ActivityType.UPDATE_ACCOUNT)
    ]);

    return { name, success: 'Compte mis à jour avec succès.' };
  }
);

const removeTeamMemberSchema = z.object({
  memberId: z.number()
});

export const removeTeamMember = validatedActionWithUser(
  removeTeamMemberSchema,
  async (data, _, user) => {
    const { memberId } = data;
    const userWithTeam = await getUserWithTeam(user.id);

    if (!userWithTeam?.teamId) {
      return { error: 'L\'utilisateur ne fait pas partie d\'une équipe' };
    }

    await db
      .delete(teamMembers)
      .where(
        and(
          eq(teamMembers.id, memberId),
          eq(teamMembers.teamId, userWithTeam.teamId)
        )
      );

    await logActivity(
      userWithTeam.teamId,
      user.id,
      ActivityType.REMOVE_TEAM_MEMBER
    );

    return { success: 'Membre de l\'équipe supprimé avec succès' };
  }
);

const inviteTeamMemberSchema = z.object({
  email: z.string().email('Invalid email address'),
  role: z.enum(['member', 'owner'])
});

export const inviteTeamMember = validatedActionWithUser(
  inviteTeamMemberSchema,
  async (data, _, user) => {
    const { email, role } = data;
    const userWithTeam = await getUserWithTeam(user.id);

    if (!userWithTeam?.teamId) {
      return { error: 'L\'utilisateur ne fait pas partie d\'une équipe' };
    }

    const existingMember = await db
      .select()
      .from(users)
      .leftJoin(teamMembers, eq(users.id, teamMembers.userId))
      .where(
        and(eq(users.email, email), eq(teamMembers.teamId, userWithTeam.teamId))
      )
      .limit(1);

    if (existingMember.length > 0) {
      return { error: 'L\'utilisateur est déjà membre de cette équipe' };
    }

    // Check if there's an existing invitation
    const existingInvitation = await db
      .select()
      .from(invitations)
      .where(
        and(
          eq(invitations.email, email),
          eq(invitations.teamId, userWithTeam.teamId),
          eq(invitations.status, 'pending')
        )
      )
      .limit(1);

    if (existingInvitation.length > 0) {
      return { error: 'Une invitation a déjà été envoyée à cette adresse email' };
    }

    // Create a new invitation
    await db.insert(invitations).values({
      teamId: userWithTeam.teamId,
      email,
      role,
      invitedBy: user.id,
      status: 'pending'
    });

    await logActivity(
      userWithTeam.teamId,
      user.id,
      ActivityType.INVITE_TEAM_MEMBER
    );

    // TODO: Send invitation email and include ?inviteId={id} to sign-up URL
    // await sendInvitationEmail(email, userWithTeam.team.name, role)

    return { success: 'Invitation envoyée avec succès' };
  }
);
